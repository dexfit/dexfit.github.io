'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _dec, _class;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConfigService = undefined;

var _core = require('angular2/core');

var _nestedProperty = require('nested-property');

var _nestedProperty2 = _interopRequireDefault(_nestedProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ConfigService = exports.ConfigService = (_dec = (0, _core.Injectable)(), _dec(_class = (function () {
  function ConfigService(externalConfig) {
    _classCallCheck(this, ConfigService);

    this._config = externalConfig;
  }

  _createClass(ConfigService, [{
    key: 'setConfig',
    value: function setConfig(value) {
      this._config = value;
    }
  }, {
    key: 'get',
    value: function get(value) {
      return _nestedProperty2.default.get(this._config, value);
    }
  }]);

  return ConfigService;
})()) || _class);
(0, _core.Inject)('externalConfig')(ConfigService, null, 0);
//# sourceMappingURL=service.js.map